<template>
    <div>
        <div class=" bg-blue p-3 px-10 rounded-10">
            <h3>临时操作面板</h3>
            <p>tableName：{{ $route.params.tableName }}</p>
            <p>参数：{{ $route.params }}</p>
            <el-button type="info" @click.prevent="getTableData">异步获取</el-button>
        </div>


        <ContentWrap v-loading="loading">
            <span class="text-size-xl font-700">{{ tableData.table?.table_name_cn }}</span>
            <el-divider />

            <!-- 搜索表单 -->
            <el-form :model="searchForm" inline>
                <el-form-item v-for="(col, key) in tableData.search_cols" :key="key" :label="col.vi_name">
                    <!-- 日期选择器 -->
                    <template v-if="col.my_column_type === 'date' || col.my_column_type === 'datetime'">
                        <el-date-picker type="datetimerange" range-separator="To" start-placeholder="开始时间"
                            end-placeholder="结束时间" v-model="searchForm[key]" />
                    </template>
                    <!-- 下拉选择框 -->
                    <template v-else-if="col.my_column_type.includes('int') || col.relative_list!=null">
                        <el-form-item>
                            <el-select class=" w-26!" v-model="searchForm[key]" placeholder="请选择" clearable>
                                <!-- relative_list 为对象，遍历使用 Object.entries() 方法 -->
                                <el-option v-if="col.relative_list"
                                    v-for="(item, index) in Object.entries(col.relative_list)" :key="index"
                                    :label="item[1]" :value="item[1]" />
                            </el-select>
                        </el-form-item>
                    </template>
                    <!-- 输入框 -->
                    <template v-else-if="col.my_column_type.includes('varchar') || col.vi_name == 'OneId'">
                        <el-input v-model="searchForm[key]" placeholder="请输入" />
                    </template>
                    <!-- <template v-else-if="col.relative_list">
                        <el-select v-model="searchForm[key]" placeholder="请选择">
                            <el-option v-for="(label, value) in col.relative_list" :key="value" :label="label"
                                :value="value" />
                        </el-select>
                    </template> -->
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" @click="handleSearch">搜索</el-button>
                    <el-button @click="handleReset">重置</el-button>
                </el-form-item>
            </el-form>

            <!-- 表格体操作按钮 -->
            <el-row>
                <el-col :span="24" class="flex ">
                    <ElButton v-if="tableData.table_cmds.length" type="primary"
                        v-for="(item, index) in tableData.table_cmds">{{
                            item.cmd_cn }}</ElButton>
                    <!-- <ElButton type="primary">添加{{ tableData.table?.table_name_cn }}</ElButton> -->
                </el-col>
            </el-row>

            <!-- 通过 el-table-column 动态生成表格列，并且在每一列中动态绑定对应的行数据 -->
            <!-- 动态生成表格列：使用 v-for 循环遍历 tableData.cols_show，并动态生成 el-table-column。
                绑定列属性：使用 :prop="item.my_column_name" 动态绑定列的属性名称，这样每一列都会自动对应到 rows 中的相应字段。
                显示数据：在 el-table-column 的 default 插槽中，通过 scope.row[item.my_column_name] 动态获取并显示每一行的对应列数据。 -->
            <el-table v-if="tableData.rows.length" :data="tableData.rows" style="width: 100%">
                <el-table-column v-for="(item, index) in Object.values(tableData.cols_show)" :key="index"
                    :prop="item.my_column_name" :label="item.vi_name">
                    <template #default="scope">
                        <div style="display: flex; align-items: center">
                            <span style="margin-left: 10px">{{ scope.row[item.my_column_name] }}</span>
                        </div>
                    </template>
                </el-table-column>
                <!-- 操作栏 -->
                <el-table-column label="操作">
                    <template #default="scope">
                        <el-button :size="'small'" type="primary" @click="handleView(scope.row)">查看</el-button>
                        <el-button :size="'small'" type="warning" @click="handleEdit(scope.row)">编辑</el-button>
                        <el-button :size="'small'" type="danger" @click="handleDelete(scope.row)">删除</el-button>
                    </template>
                </el-table-column>
            </el-table>

            <div class="demo-pagination-block mt-8">
                <el-pagination v-model:current-page="currentPage" v-model:page-size="pageSize"
                    :page-sizes="[10, 50, 100, 200]" background layout="total, sizes, prev, pager, next, jumper"
                    :total="tableData.total_rows" @size-change="handleSizeChange"
                    @current-change="handleCurrentChange" />
            </div>
        </ContentWrap>



        <!-- 查看详情弹出框 -->
        <el-dialog v-model="dialogVisible" title="查看详情">
            <el-form :model="currentRow">
                <el-form-item v-for="(col, key) in tableData.cols_show" :key="key" :label="col.vi_name">
                    <el-input v-model="currentRow[col.my_column_name]" :disabled="true" />
                </el-form-item>
            </el-form>
        </el-dialog>

    </div>
</template>

<script lang="ts" setup>
import { getTableDataApi } from "@/api/table/tableApi";
import { ref } from 'vue';
import { useRoute } from 'vue-router'
import type { TableData } from '@/api/table/Table'
import {
    ElTable,
    ElTableColumn,
    ElPagination,
    ElButton,
    ElForm,
    ElFormItem,
    ElInput,
    ElDatePicker,
    ElSelect,
    ElOption,
    ElRow,
    ElCol,
    ElDivider,
    ElDialog
} from 'element-plus';
import { ContentWrap } from "@/components/ContentWrap";
// import { Dialog } from "@/components/Dialog";

const route = useRoute()

// 分页
const currentPage = ref(1) // 当前页码
const pageSize = ref(100) // 每页条数

// 搜索表单数据
const searchForm = ref<Record<string, any>>({});

// 表格信息整体
const tableData = ref<TableData>({
    table: undefined,
    all_cols: undefined,
    offset: 0,
    per_page: 0,
    url_search: [],
    table_name: "",
    search_cols: undefined,
    search: [],
    search_data: [],
    cols_show: undefined,
    table_list_cmds: [],
    cols_toggle: [],
    table_cmds: [],
    rows: [],
    total_rows: 0,
    table_cmd_strs: [],
    pagination: "",
    rows_list_search_form: "",
    form_load_view_file: ""
})

// 获取数据时的loading状态
const loading = ref(false)

// 当前选中的行数据
const currentRow = ref<Record<string, any>>({});
const dialogVisible = ref(false);


getTableData()


// const isDialogVisible = ref(false)

// 打开弹窗
// const openDialog = () => {
//     isDialogVisible.value = true
// }

// 获取表格数据
async function getTableData() {
    loading.value = true
    let res = await getTableDataApi(route.params.tableName as string)
    console.log(res.data);
    // tableData.value = res.data.table
    tableData.value = res.data
    // currentPage.value = res.data.offset


    // 初始化搜索表单数据
    if (tableData.value.search_cols) {
        for (const key in tableData.value.search_cols) {
            searchForm.value[key] = null;
        }
    }

    loading.value = false
}

// 处理搜索
function handleSearch() {
    console.log('搜索条件:', searchForm.value);
    // 在这里添加搜索逻辑，例如调用API并传递搜索条件
}
// 处理重置
function handleReset() {
    for (const key in searchForm.value) {
        searchForm.value[key] = null;
    }
    // 重置后可以重新获取数据或清空表格内容
}

// 查看操作
function handleView(row: any) {
    console.log('查看:', row);
    currentRow.value = { ...row };
    dialogVisible.value = true;
}

// 编辑操作
function handleEdit(row: any) {
    console.log('编辑:', row);
}

// 删除操作
function handleDelete(row: any) {
    console.log('删除:', row);
}

const handleSizeChange = (val: number) => {
    console.log(`${val} items per page`)
}
const handleCurrentChange = (val: number) => {
    console.log(`current page: ${val}`)
}
</script>
