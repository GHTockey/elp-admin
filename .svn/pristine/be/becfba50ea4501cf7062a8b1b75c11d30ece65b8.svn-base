<template>
  <ContentWrap class="cmd-page">
    <div>
      <el-table :data="tableData" style="width: 100%">
        <el-table-column prop="name" label="名称" width="150">
        </el-table-column>
        <el-table-column prop="actions" label="操作">
          <template #default="scope">
            <div class="flex flex-wrap items-center">
              <el-button v-for="(url, buttonName) in scope.row.actions" :key="buttonName" @click="openInNewTab(url)"
                class="mr-2 mb-2">{{ buttonName }}</el-button>
            </div>
          </template>
        </el-table-column>
      </el-table>
    </div>
  </ContentWrap>
</template>

<script lang="ts" setup>
import { ContentWrap } from "@/components/ContentWrap";
import { ref } from 'vue';
import { getCmdsDataApi } from '@/api/other';
import { ElTable, ElTableColumn, ElButton } from 'element-plus';

import router from "@/router";
import { useTagsViewStore } from "@/store/modules/tagsView";

const tagsViewStore = useTagsViewStore()
const tableData = ref([])


getData()


// 获取数据
async function getData() {
  const res = await getCmdsDataApi()
  let d = typeof res.data == 'string' ? JSON.parse(res.data as unknown as string) : res.data

  // 遍历指定的字段
  const targetFields = ['cmd_groups', 'cmd_groups_blank', 'cmd_groups_form'];

  for (const field of targetFields) {
    if (d[field]) {
      // 遍历每个组中的键值对
      for (const key in d[field]) {
        // 将每个键值对添加到tableData数组中
        tableData.value.push({
          name: key, // 键作为名称
          actions: d[field][key] // 值作为操作
        });
      }
    }
  }


  // 将路由添加到标签栏
  router.currentRoute.value.meta.title = '常用命令'
  tagsViewStore.addVisitedView({ // 不缓存
    ...router.currentRoute.value,
  })
}

function openInNewTab(url: string) {
  window.open(url, '_blank');
}
</script>
