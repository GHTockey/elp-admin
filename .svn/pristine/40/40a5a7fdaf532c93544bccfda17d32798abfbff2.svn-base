import { AxiosResponse, InternalAxiosRequestConfig } from './types'
import { ElMessage } from 'element-plus'
import qs from 'qs'
import { SUCCESS_CODE, TRANSFORM_REQUEST_DATA } from '@/constants'
import { useUserStoreWithOut } from '@/store/modules/user'
import { objToFormData } from '@/utils'

// 默认请求拦截器
const defaultRequestInterceptors = (config: InternalAxiosRequestConfig) => {
    // 临时添加param参数 '__API_TMP_TEST_82__': 1  测试用
  if(!config.params) config.params = {};
  config.params['__API_TMP_TEST_82__'] = 1

  if (
    config.method === 'post' &&
    config.headers['Content-Type'] === 'application/x-www-form-urlencoded'
  ) { // 如果是post请求，并且是formdata格式，则转换
    config.data = qs.stringify(config.data)
  } else if (
    TRANSFORM_REQUEST_DATA &&
    config.method === 'post' &&
    config.headers['Content-Type'] === 'multipart/form-data'
  ) {
    config.data = objToFormData(config.data)
  }

  if (config.method === 'get' && config.params) {

    // config.headers['Content-Type'] = 'application/json';
    let url = config.url as string
    url += '?'
    const keys = Object.keys(config.params)
    for (const key of keys) {
      if (config.params[key] !== void 0 && config.params[key] !== null) {
        url += `${key}=${encodeURIComponent(config.params[key])}&`
      }
    }
    url = url.substring(0, url.length - 1)
    config.params = {}
    config.url = url
  }
  return config
}

// 默认响应拦截器
const defaultResponseInterceptors = (response: AxiosResponse) => {
  if (response?.config?.responseType === 'blob') {
    // 如果是文件流，直接过
    return response
  } else if (response.data.code == SUCCESS_CODE) {
    return response.data
  } else {
    // console.log('response.data',response.data)                             =1 请求错误
    if(response.status == 200 && response.data?.code != SUCCESS_CODE && response.data.code != 1) {
      // console.log('response',response.data)
      // 拼接规范响应体
      let myResponse = {
        code: 0,
        msg: 'ok',
        data: response.data
      }
      return myResponse
    } else {
      ElMessage.error(response?.data?.msg)
      if (response?.data?.code === 401) {
        const userStore = useUserStoreWithOut()
        userStore.logout()
      }
    }

  }
}

export { defaultResponseInterceptors, defaultRequestInterceptors }
