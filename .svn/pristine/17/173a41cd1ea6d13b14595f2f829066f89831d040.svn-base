// import type { Plugin } from 'vue'
// import { baseURL } from "@/main";

import { h, Ref } from "vue"

/**
 *
 * @param component 需要注册的组件
 * @param alias 组件别名
 * @returns any
 */
export const withInstall = <T>(component: T, alias?: string) => {
  const comp = component as any
  comp.install = (app: any) => {
    app.component(comp.name || comp.displayName, component)
    if (alias) {
      app.config.globalProperties[alias] = component
    }
  }
  return component as T & Plugin
}

/**
 * @param str 需要转下划线的驼峰字符串
 * @returns 字符串下划线
 */
export const humpToUnderline = (str: string): string => {
  return str.replace(/([A-Z])/g, '-$1').toLowerCase()
}

/**
 * @param str 需要转驼峰的下划线字符串
 * @returns 字符串驼峰
 */
export const underlineToHump = (str: string): string => {
  if (!str) return ''
  return str.replace(/\-(\w)/g, (_, letter: string) => {
    return letter.toUpperCase()
  })
}

/**
 * 驼峰转横杠
 */
export const humpToDash = (str: string): string => {
  return str.replace(/([A-Z])/g, '-$1').toLowerCase()
}

export const setCssVar = (prop: string, val: any, dom = document.documentElement) => {
  dom.style.setProperty(prop, val)
}

export const getCssVar = (prop: string, dom = document.documentElement) => {
  return getComputedStyle(dom).getPropertyValue(prop)
}

/**
 * 查找数组对象的某个下标
 * @param {Array} ary 查找的数组
 * @param {Functon} fn 判断的方法
 */
// eslint-disable-next-line
export const findIndex = <T = Recordable>(ary: Array<T>, fn: Fn): number => {
  if (ary.findIndex) {
    return ary.findIndex(fn)
  }
  let index = -1
  ary.some((item: T, i: number, ary: Array<T>) => {
    const ret: T = fn(item, i, ary)
    if (ret) {
      index = i
      return ret
    }
  })
  return index
}

export const trim = (str: string) => {
  return str.replace(/(^\s*)|(\s*$)/g, '')
}

/**
 * @param {Date | number | string} time 需要转换的时间
 * @param {String} fmt 需要转换的格式 如 yyyy-MM-dd、yyyy-MM-dd HH:mm:ss
 */
export function formatTime(time: Date | number | string, fmt: string) {
  if (!time) return ''
  else {
    const date = new Date(time)
    const o = {
      'M+': date.getMonth() + 1,
      'd+': date.getDate(),
      'H+': date.getHours(),
      'm+': date.getMinutes(),
      's+': date.getSeconds(),
      'q+': Math.floor((date.getMonth() + 3) / 3),
      S: date.getMilliseconds()
    }
    if (/(y+)/.test(fmt)) {
      fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length))
    }
    for (const k in o) {
      if (new RegExp('(' + k + ')').test(fmt)) {
        fmt = fmt.replace(
          RegExp.$1,
          RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length)
        )
      }
    }
    return fmt
  }
}

/**
 * 生成随机字符串
 */
export function toAnyString() {
  const str: string = 'xxxxx-xxxxx-4xxxx-yxxxx-xxxxx'.replace(/[xy]/g, (c: string) => {
    const r: number = (Math.random() * 16) | 0
    const v: number = c === 'x' ? r : (r & 0x3) | 0x8
    return v.toString()
  })
  return str
}

/**
 * 首字母大写
 */
export function firstUpperCase(str: string) {
  return str.toLowerCase().replace(/( |^)[a-z]/g, (L) => L.toUpperCase())
}

/**
 * 把对象转为formData
 */
export function objToFormData(obj: Recordable) {
  const formData = new FormData()
  Object.keys(obj).forEach((key) => {
    formData.append(key, obj[key])
  })
  return formData
}



interface DataItem {
  id: number;
  table_name_cn: string;
  pid: number;
  icon_normal: string | null;
  icon_active: string | null;
  manage_uri?: string;
  sub_list: DataItem[];
}
// 将给定的数据转换为 AppRouteRecordRaw[] 类型的路由数据
export function transformToAppRouteRecordRaw(data: DataItem[], isTopLevel: boolean = true): AppRouteRecordRaw[] {
  // return data.map(item => ({
  //   // path: `/table?id=${item.id}`,
  //   // 检查有没有table_name，如果有则添加target参数，否则不添加
  //   path: item.table_name ? `/table/${item.table_name}` : `/table/`, // ？？？？？

  //   // path: item.manage_uri || `/${item.table_name_cn}`,  // 默认路径，如果没有 manage_uri 则用 table_name_cn
  //   name: item.table_name || item.table_name_cn,
  //   meta: {
  //     iconNormal: item.icon_normal, // 未选中
  //     iconActive: item.icon_active, // 选中
  //     title: item.table_name_cn, // 标题
  //     // title: item.table_name || item.table_name_cn, // 标题

  //     // title: `
  //     //       <div>
  //     //         <img src="${item.icon_normal}" alt="normal icon" />
  //     //         <img src="${item.icon_active}" alt="active icon" />
  //     //         ${item.table_name_cn}
  //     //       </div>
  //     //     `, // 标题

  //   },
  //   // component: item.manage_uri ? item.manage_uri : undefined,  // 如果有 manage_uri 则作为组件路径
  //   children: transformToAppRouteRecordRaw(item.sub_list),
  // }));


  return data.map(item => ({// 1             3                 2
    // path: isTopLevel ? `/table` : `${item.table_name ? (item.table_name + '?uri='+item.manage_uri?.replace(baseURL,'') ) : ''}` || '' + item.id, // 顶级路由以斜杠开头，子路由不以斜杠开头
    path: isTopLevel ? `/table` : item.table_name || '' + item.id, // 顶级路由以斜杠开头，子路由不以斜杠开头
    name: item.table_name_cn,
    meta: {
      // iconNormal: item.icon_normal, // 未选中
      // iconActive: item.icon_active, // 选中
      title: item.table_name_cn, // 标题
      uri: item.manage_uri || 'null',
    },
    children: item.sub_list && item.sub_list.length > 0 ? transformToAppRouteRecordRaw(item.sub_list, false) : [], // 递归处理子路由
  }));
}


export function navsDataTransform(data, parentId) {
  return data.map(item => {
    const transformed = {
      id: item.id.toString(),
      name: item.table_name_cn,
      path: item.table_name ? item.table_name : (parentId == '0' ? ('/' + item.table_name_cn) : item.table_name_cn),
      parentId: parentId,
      // component: item.manage_uri ? (<string>item.manage_uri).replace(import.meta.env.VITE_API_BASE_PATH_URL, '') : '#',
      component: '#',
      // component: item.manage_uri ? () => import('@/views/Table/Table.vue') : '#',
      meta: {
        hidden: false,
        // icon: item.icon_normal ? item.icon_normal : 'Menu',
        title: item.table_name_cn
      },
      children: item.sub_list.length ? navsDataTransform(item.sub_list, item.id.toString()) : undefined
    };
    return transformed;
  });
}


// 表格下拉选择框属性值类型转字符串
export function formatValue(currentRow: Ref<any>) {
  currentRow.value.action_type ? currentRow.value.action_type = currentRow.value.action_type.toString() : '';
  currentRow.value.app_id ? currentRow.value.app_id = currentRow.value.app_id.toString() : '';
  currentRow.value.article_category_id ? currentRow.value.article_category_id = currentRow.value.article_category_id.toString() : '';
}


// computed 计算属性
// export const isDateField = (field) => field.my_column_type == 'date' || field.my_column_type == 'datetime';
// export const isInputField = (field) => field.my_column_type.includes('varchar') || field.vi_name == 'OneId';
// export const isSelectField = (field) => {
//   return (
//     field.my_column_type.includes('int') &&
//     field.vi_name != 'OneId' &&
//     field.vi_name != 'id' &&
//     field.vi_name != 'is_2_convertlab' &&
//     field.vi_name != '数量') ||
//     field.relative_list != null
// };

// 是否是日期选择器
export function isDateField(field) {
  return field.my_column_type === 'date' || field.my_column_type == 'datetime';
}

// 是否是输入框
export function isInputField(field) {
  // 判断字段类型是否是 varchar 或 int
  const isVarcharOrInt = field.my_column_type.startsWith('varchar') || field.my_column_type.startsWith('int');
  // 判断字段是否不是下拉选择器
  const notSelectField = !field.relative_static && !field.relative_list;
  // 判断字段是否不是弹框选择器
  const notPopupField = !(field.is_relative === 1 && field.relative_ajax_select === 1);
  // 如果字段是 varchar 或 int 且不是下拉选择器和弹框选择器，则认为是输入框
  return isVarcharOrInt && notSelectField && notPopupField;
}

// 是否是下拉选择器
export function isSelectField(field) {
  // relative_static：是否有静态下拉选项  relative_list：是否有动态下拉选项
  // 如果字段的 relative_static 或 relative_list 存在，则认为是下拉选择器
  return field.relative_static || field.relative_list;
}

// 是否是弹框选择器
export function isPopupField(field) {
  // 如果字段是相对的且支持 AJAX 选择，则认为是弹框选择器
  return field.is_relative === 1 && field.relative_ajax_select === 1;
}


// 根据 auth 判断是否是可编辑的字段
export function isEditable(auth: string) {
  // 使用正则表达式查找所有"read"的出现次数
  const readCount = (auth.match(/read/g) || []).length;
  // console.log('readCount:', readCount)
  return readCount < 2;
}